{"version":3,"sources":["../src/index.js"],"names":["module","exports","context","req","response","query","test","dbName","collectionName","dbUsername","dbPassword","limit","uri","client","mongodb","MongoClient","connect","useNewUrlParser","collection","db","method","parseInt","find","toArray","res","insertOne","body","ops","deleteOne","_id","ObjectId","headers","JSON","stringify"],"mappings":";;AAAA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAeC,OAAf,EAAwBC,GAAxB,EAA6B;AAC5C,MAAIC,QAAJ;;AACA,MAAID,GAAG,CAACE,KAAJ,CAAUC,IAAV,IAAkBH,GAAG,CAACE,KAAJ,CAAUC,IAAV,KAAmB,MAAzC,EAAiD;AAC/CF,IAAAA,QAAQ,GAAG,IAAX;AACD,GAFD,MAEO;AACL,QAAIG,MAAM,GAAG,WAAb;AACA,QAAIC,cAAc,GAAG,MAArB;AACA,QAAIC,UAAU,GAAG,aAAjB;AACA,QAAIC,UAAU,GAAG,SAAjB;AAEA,QAAIC,KAAK,GAAG,MAAZ,CANK,CAOL;;AACA,UAAMC,GAAG,GAAI,aAAYH,UAAW,IAAGC,UAAW,4BAA2BH,MAAO,EAApF,CARK,CAQkF;;AAEvF,QAAIM,MAAM,GAAG,MAAMC,iBAAQC,WAAR,CAAoBC,OAApB,CAA4BJ,GAA5B,EAAiC;AAClDK,MAAAA,eAAe,EAAE;AADiC,KAAjC,CAAnB;AAGA,QAAIC,UAAU,GAAG,MAAML,MAAM,CAACM,EAAP,CAAUZ,MAAV,EAAkBW,UAAlB,CAA6BV,cAA7B,CAAvB;;AACA,QAAIL,GAAG,CAACiB,MAAJ,KAAe,KAAnB,EAA0B;AACxB,UAAIjB,GAAG,CAACE,KAAJ,CAAUM,KAAV,IAAmBU,QAAQ,CAAClB,GAAG,CAACE,KAAJ,CAAUM,KAAX,CAAR,GAA4B,CAAnD,EAAsD;AACpDA,QAAAA,KAAK,GAAGU,QAAQ,CAAClB,GAAG,CAACE,KAAJ,CAAUM,KAAX,CAAhB;AACD;;AACDP,MAAAA,QAAQ,GAAG,MAAMc,UAAU,CACxBI,IADc,GAEdX,KAFc,CAERA,KAFQ,EAGdY,OAHc,EAAjB;AAID,KARD,MAQO,IAAIpB,GAAG,CAACiB,MAAJ,KAAe,MAAnB,EAA2B;AAChC,UAAII,GAAG,GAAG,MAAMN,UAAU,CAACO,SAAX,CAAqBtB,GAAG,CAACuB,IAAzB,CAAhB;AACAtB,MAAAA,QAAQ,GAAGoB,GAAG,CAACG,GAAJ,CAAQ,CAAR,CAAX;AACD,KAHM,MAGA,IAAIxB,GAAG,CAACiB,MAAJ,KAAe,KAAnB,EAA0B,CAChC,CADM,MACA;AACLhB,MAAAA,QAAQ,GAAG,MAAMc,UAAU,CAACU,SAAX,CAAqB;AACpCC,QAAAA,GAAG,EAAE,IAAIf,iBAAQgB,QAAZ,CAAqB3B,GAAG,CAACuB,IAAJ,CAASG,GAA9B;AAD+B,OAArB,CAAjB;AAGD;AACF;;AAED3B,EAAAA,OAAO,CAACsB,GAAR,GAAc;AACZO,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KADG;AAIZL,IAAAA,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAe7B,QAAf;AAJM,GAAd;AAMD,CA3CD","sourcesContent":["import mongodb from 'mongodb';\n\nmodule.exports = async function(context, req) {\n  let response;\n  if (req.query.test && req.query.test === 'true') {\n    response = 'OK';\n  } else {\n    let dbName = 'azurefunc';\n    let collectionName = 'test';\n    let dbUsername = 'selimkayali';\n    let dbPassword = 'a123123';\n\n    let limit = 999999;\n    //const uri = `mongodb+srv://${dbUsername}:${dbPassword}@cluster0-ysdpk.mongodb.net/test?retryWrites=true&w=majority`;  //MongoDB Atlas\n    const uri = `mongodb://${dbUsername}:${dbPassword}@ds040309.mlab.com:40309/${dbName}`; // MLab\n\n    let client = await mongodb.MongoClient.connect(uri, {\n      useNewUrlParser: true\n    });\n    let collection = await client.db(dbName).collection(collectionName);\n    if (req.method === 'GET') {\n      if (req.query.limit && parseInt(req.query.limit) > 0) {\n        limit = parseInt(req.query.limit);\n      }\n      response = await collection\n        .find()\n        .limit(limit)\n        .toArray();\n    } else if (req.method === 'POST') {\n      let res = await collection.insertOne(req.body);\n      response = res.ops[0];\n    } else if (req.method === 'PUT') {\n    } else {\n      response = await collection.deleteOne({\n        _id: new mongodb.ObjectId(req.body._id)\n      });\n    }\n  }\n\n  context.res = {\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify(response)\n  };\n};\n"],"file":"index.js"}